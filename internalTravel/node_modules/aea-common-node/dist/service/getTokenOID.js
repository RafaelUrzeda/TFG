"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTokenOID = void 0;
const axios_1 = __importStar(require("axios"));
const aea_logger_1 = require("aea-logger");
const jwt = __importStar(require("jsonwebtoken"));
const apiError_1 = require("../errors/apiError");
const basicTokenMap = new Map();
/**
 * Lanza una consulta a openID para obtener un token valido.
 * @param {String} host - Hostname del servicio de openID a consultar.
 * @param {String} basic - Valor del basic correspondiente al cliente.
 * @returns {Promise<String>} - Valor del token (bearer)
 *
 * @example
 * let token = await getTokenOID('10.153.0.128:28598','password');
 */
const getTokenOID = async (host, basic) => {
    const basicData = basicTokenMap.get(basic);
    if (basicData && isNotExpired(basicData.exp)) {
        aea_logger_1.logger.debug("getToken - Token Not Expired ");
        return "Bearer " + basicData.token;
    }
    const options = {
        url: host + "/oauth2/token",
        method: "POST",
        timeout: 5000,
        headers: {
            Authorization: "Basic " + basic,
            "Content-Type": "application/x-www-form-urlencoded",
            "X-Forwarded-Proto": "https",
        },
        data: "grant_type=client_credentials",
    };
    aea_logger_1.logger.debug("getToken - URL: " + options.url + " Request");
    try {
        const resp = await axios_1.default.request(options);
        const token = resp.data["access_token"];
        const decoded = jwt.decode(token);
        if (!decoded.exp) {
            throw new Error("Invalid token");
        }
        const exp = new Date((decoded.exp - 60) * 1000);
        aea_logger_1.logger.debug("getToken - Token Expiration Time:" + exp);
        basicTokenMap.set(basic, { token, exp });
        return "Bearer " + token;
    }
    catch (e) {
        aea_logger_1.logger.error("getToken - Response:" + e.stack);
        if (e instanceof axios_1.AxiosError) {
            throw new apiError_1.ApiError(e.status ?? 500, e.code ?? "unexpected_error", e.message);
        }
        throw e;
    }
};
exports.getTokenOID = getTokenOID;
const isNotExpired = (exp) => exp && exp > new Date();
