"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fastifyAeaAuthentication = void 0;
const fastify_plugin_1 = require("fastify-plugin");
const axios_1 = require("axios");
const jwt = require("jsonwebtoken");
const jose_1 = require("jose");
const cron_1 = require("cron");
const aea_logger_1 = require("aea-logger");
const path = '/.well-known/jwks.json';
let domainFunc;
let jwks;
let publicKeys;
let job;
const jsonError = (code, message) => {
    return {
        errorCode: code,
        errorDescription: message
    };
};
const refreshPublicKeys = async () => {
    let res;
    try {
        res = await axios_1.default.get(domainFunc() + path, { headers: { 'X-Forwarded-Proto': 'https' }, timeout: 4000 });
    }
    catch (e) {
        aea_logger_1.logger.error('aea-express-authentication refreshPublicKeys - ' + e);
        return;
    }
    const ks = res.data?.keys;
    if (JSON.stringify(ks) !== JSON.stringify(jwks)) {
        aea_logger_1.logger.info('aea-fastify-authentication refreshPublicKeys update publicKeys... ' + JSON.stringify(ks) + ' [before: ' + JSON.stringify(jwks) + ' ]');
        const aux = [];
        for (const i in ks) {
            if (Object.prototype.hasOwnProperty.call(ks, i)) {
                const rsaPublicKey = await (0, jose_1.importJWK)(ks[i], 'RSA');
                if (typeof rsaPublicKey === 'object' && 'export' in rsaPublicKey) {
                    aux[i] = rsaPublicKey.export({ type: 'pkcs1', format: 'pem' });
                }
            }
        }
        publicKeys = aux;
        jwks = ks;
    }
};
const verify = async (fastify, opts) => {
    if (typeof opts.func !== 'function') {
        throw new Error('aea-fastify-authentication init - func parameter must be of type function');
    }
    if (opts.scope === undefined) {
        throw new Error('aea-fastify-authentication init - scope to validate cannot be null or undefined');
    }
    if (!Array.isArray(opts.scope)) {
        throw new Error('aea-fastify-authentication init - scope to validate must be array');
    }
    if (opts.exclude === undefined)
        opts.exclude = '';
    if (opts.include === undefined)
        opts.include = '';
    domainFunc = opts.func;
    const cron = Math.floor(Math.random() * 59).toString() + ' */10 * * * *';
    aea_logger_1.logger.info('aea-fastify-authentication init - Auto Refresh Create Cron ' + cron);
    job = new cron_1.CronJob(cron, async () => {
        await refreshPublicKeys();
    }, null, true, 'America/Los_Angeles', null, false);
    aea_logger_1.logger.info('aea-fastify-authentication init - Loading publicKeys ' + domainFunc() + path);
    await refreshPublicKeys();
    fastify.addHook('onRequest', async (req, res) => {
        const route = req.routeOptions.url?.valueOf() || "";
        if (opts.include && opts.include.length > 0) {
            if (!opts.include.includes(route))
                return;
        }
        else if (opts.exclude && opts.exclude.includes(route)) {
            return;
        }
        if (publicKeys === undefined || publicKeys.length < 1) {
            aea_logger_1.logger.error('aea-fastify-authentication - public key does not exist');
            return res.code(401).send(jsonError('JsonWebTokenError', 'secret or public key must be provided'));
        }
        const authorization = req.headers.authorization !== undefined ? req.headers.authorization : '';
        let token = '';
        const split = authorization.split(' ');
        if (split.length === 2 && split[0].toLowerCase() === 'bearer') {
            token = split[1];
        }
        let decoded;
        let len = publicKeys.length;
        let exit = false;
        while (len-- && !exit) {
            try {
                decoded = jwt.verify(token, publicKeys[len]);
                exit = true;
            }
            catch (e) {
                if (len === 0 || e.name === 'TokenExpiredError') {
                    aea_logger_1.logger.error('aea-fastify-authentication - token expired');
                    return res.code(401).send(jsonError(e.name, e.message));
                }
            }
        }
        const scope = decoded.scope === undefined ? decoded.scp : decoded.scope;
        const sc = opts.scope;
        for (const i in sc) {
            if (scope.includes(sc[i])) {
                break;
            }
            if (sc.length - 1 === parseInt(i)) {
                return res.code(400).send(jsonError('InvalidScope', 'Invalid Scope'));
            }
        }
        req.jwt = decoded;
    });
    fastify.decorate('killCronJwt', function () {
        return job.stop();
    });
};
exports.fastifyAeaAuthentication = (0, fastify_plugin_1.default)(verify, {
    fastify: '5.x',
    name: 'fastify-aea-authentication'
});
